type Factory @entity {
  "Factory address"
  id: ID!

  "pair info"
  pairCount: Int!

  "total volume: BigDecimal"
  totalVolumeUSD: String!
  "BigDecimal"
  totalVolumeNative: String!

  "Untracked values: BigDecimal"
  untrackedVolumeUSD: String!

  "total liquidity: BigDecimal"
  totalLiquidityUSD: String!
  totalLiquidityNative: String!

  "transactions"
  txCount: Int!
}

type Token @entity {
  "Token Address"
  id: ID!

  "mirrored from the smart contract"
  symbol: String!
  name: String!
  decimals: Int!

  "used for other stats like marketcap"
  totalSupply: String!

  "token specific volume: BigDecimal"
  tradeVolume: String!
  tradeVolumeUSD: String!
  untrackedVolumeUSD: String!

  "transactions across all pairs"
  txCount: Int!

  "liquidity across all pairs: BigDecimal"
  totalLiquidity: String!

  "derived prices: BigDecimal"
  derivedNative: String!

  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [PairDayData!] @derivedFrom(field: "token1")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  "pair address"
  id: ID!
  factory: Factory!

  "mirrored from the smart contract"
  token0: Token!
  token1: Token!

  "BigDecimal"
  reserve0: String!
  "BigDecimal"
  reserve1: String!
  "BigDecimal"
  totalSupply: String!

  "derived liquidity: BigDecimal"
  reserveNative: String!
  "BigDecimal"
  reserveUSD: String!
  "Used for separating per pair reserves and global: BigDecimal"
  trackedReserveNative: String!

  "Price in terms of the asset pair: BigDecimal"
  token0Price: String!
  "BigDecimal"
  token1Price: String!

  "lifetime volume stats: BigDecimal"
  volumeToken0: String!
  "BigDecimal"
  volumeToken1: String!
  "BigDecimal"
  volumeUSD: String!
  "BigDecimal"
  untrackedVolumeUSD: String!
  txCount: Int!

  "creation stats"
  createdAtTimestamp: DateTime!
  createdAtBlockNumber: BigInt!

  "Filed used to help derived relationship -- used to detect new exchanges"
  liquidityProviderCount: Int!
  "derived fields"
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]!
    @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type User @entity {
  "user address"
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  "BigDecimal"
  usdSwapped: String
}

type LiquidityPosition @entity {
  "pair.id-user.id"
  id: ID!
  user: User!
  pair: Pair!
  "BigDecimal"
  liquidityTokenBalance: String!
}
# Saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPositions: LiquidityPosition!
  "Saved for fast historical lookups"
  timestamp: DateTime!
  "Saved for fast historical lookups"
  block: Int!
  "Reference to user"
  user: User!
  pair: Pair!

  "Snapshot of token0 price: BigDecimal"
  token0PriceUSD: String!
  "BigDecimal"
  token1PriceUSD: String!

  "Snapshot of pair token0 reserves: BigDecimal"
  reserve0: String!
  "BigDecimal"
  reserve1: String!
  "Snapshot of pair reserves in USD: BigDecimal"
  reserveUSD: String!
  "BigDecimal"
  liquidityTokenTotalSupply: String!
  "Snapshot of users pool token balance: BigDecimal"
  liquidityTokenBalance: String!
}

type Transaction @entity {
  # txn hash
  id: ID!
  blockNumber: BigInt!
  timestamp: DateTime!
  mints: [ID!]!
  burns: [ID!]!
  swaps: [ID!]!
}

type Mint @entity {
  "Transaction hash + '-' + index in mints Transaction array"
  id: ID!
  transaction: Transaction!
  "Need this to pull recent txns for specific token or pair"
  timestamp: DateTime!
  pair: Pair!

  "Populated from the primary Transfer event"
  to: String!
  liquidity: String!

  "Populated from the Mint event"
  sender: String
  amount0: String!
  amount1: String!
  logIndex: Int
  "Derived amount based on available prices of tokens"
  amountUSD: String

  "Optional fee fields, if a Transfer event is fired in _mintFee"
  feeTo: String
  feeLiquidity: String
}

type Burn @entity {
  "Transaction hash +'-' +index in mints Transaction array"
  id: ID!
  transaction: Transaction!
  "Need this to pull recent txns for specific token or pair"
  timestamp: DateTime!
  pair: Pair!

  "Populated from the primary Transfer event"
  liquidity: String!

  "Populated from the Burn event"
  sender: String
  amount0: String
  amount1: String
  to: String
  logIndex: Int
  "Derived amount based on available prices of tokens"
  amountUSD: String

  "Mark uncomplete in ETH case"
  needsComplate: Boolean!

  "Optional fee fields, if a Transfer event is fired in _mintFee"
  feeTo: String
  feeLiquidity: String
}

type Swap @entity {
  "Transaction hash +'-'+index in swaps Transaction array"
  id: ID!
  transaction: Transaction!
  timestamp: DateTime!
  pair: Pair!

  sender: String!
  from: String!
  amount0In: String!
  amount1In: String!
  amount0Out: String!
  amount1Out: String!
  to: String!
  logIndex: Int

  amountUSD: String!
}

type Bundle @entity {
  id: ID!
  "Price of ETH usd: BigDecimal"
  nativePrice: String!
}

type AvaultDayData @entity {
  id: ID!
  date: DateTime!

  dailyVolumeNative: String!
  dailyVolumeUSD: String!
  dailyVolumeUntracked: String!

  "Accumulate at each trade, not just calculated off whatever totalVolume is, making it more accurate as it is a live conversion"
  totalVolumeUSD: String!
  totalVolumeNative: String!
  totalLiquidityNative: String!
  totalLiquidityUSD: String!

  txCount: Int!
}
type PairHourData @entity {
  id: ID!
  "Unix timestamp for start of hour"
  hourStartUnix: BigInt!
  pair: Pair!

  "Reserves"
  reserve0: String!
  reserve1: String!

  "total supply for LP historical returns"
  totalSupply: String!

  "derived liquidity"
  reserveUSD: String

  "volume stats"
  hourlyVolumeTolen0: String!
  hourlyVolumeTolen1: String!
  hourlyVolumeUSD: String!
  hourlyTxns: Int!
}
type PairDayData @entity {
  id: ID!
  date: DateTime!
  pairAddress: String!
  token0: Token!
  token1: Token!

  reserve0: String!
  reserve1: String!

  totalSupply: String!

  reserveUSD: String!

  dailyVolumeToken0: String!
  dailyVolumeToken1: String!
  dailyVolumeUSD: String!
  dailyTxns: Int!
}

type TokenDayData @entity {
  id: ID!
  date: DateTime!
  token: Token!

  dailyVolumeToken: String!
  dailyVolumeNative: String!
  dailyVolumeUSD: String!
  dailyTxns: Int!

  totalLiquidityToken: String!
  totalLiquidityNative: String!
  totalLiquidityUSD: String!

  priceUSD: String!
}
